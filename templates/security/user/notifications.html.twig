<div class="container-fluid bottom-padding">
    <h2>{{ 'profile.current_browser'|trans({'%browser%': browser().name, '%os%': os().name}, 'user')|raw }}</h2>
    {% if browser().name == Browsers.SAFARI and os().name == OSs.OSX %}
        {% set apns = profile_data('ApplePushNotifications.Safari', 'default') %}
        {% if apns == 'default' %}
            <a class="btn btn-primary btn-ask-safari"><i class="fa fa-safari"></i> {% trans from 'user' %}profile.ask_push_permission{% endtrans %} <i class="fa fa-check"></i></a>
        {% elseif apns and apns.deviceToken is defined %}
            {% trans from 'user' %}profile.apns_allowed{% endtrans %}
            {{ form_start(form) }}
            {% for k, n in notifications %}
            {{ form_row(form.offsetGet(k)) }}
            {% endfor %}

            <div class="form-nav">
                <div class="btn-group btn-group-justified" role="group">
                    <div class="btn-group" role="group">
                        {{ form_widget(form.save) }}
                    </div>
                    <div class="btn-group" role="group">
                        {{ form_widget(form.test) }}
                    </div>
                </div>
            </div>
            {{ form_end(form) }}
        {% else %}
            <div id="safari_denied_info" class="hidden">{% trans from 'user' %}profile.apns_denied{% endtrans %}</div>
            <script type="text/javascript">
                $(document).ready(function() {
                    if (window.safari && window.safari.pushNotification) {
                        let perm = window.safari.pushNotification.permission('web.fi.stafettkarnevalen.stafapp');
                        console.log(perm);
                        if (perm.permission === 'default') {
                            let $url = Routing.generate('nav.authuser_merge_profile_data', {
                                '_locale': '{{ app.request.locale }}',
                                'path': 'ApplePushNotifications.Safari',
                                'value': 'default'
                            });
                            $.ajax({
                                'url': $url,
                                'method': 'get',
                                'success': function (data) {
                                    console.log(data);
                                    document.location.reload();
                                },
                                'error': function (xhr) {
                                    console.log(xhr);
                                }
                            });
                        } else {
                            $('#safari_denied_info').removeClass('hidden');
                        }
                    } else {

                    }
                });
            </script>
        {% endif %}
        <div class="apns-safari"></div>
        <script type="text/javascript">
            $(document).ready(function() {
                $('body')
                    .on('click', '.btn-ask-safari', function(e) {
                        console.log('ask safari');
                        safariPushRequest();
                    })
                ;
            });

            function safariPushRequest() {
                window.safari.pushNotification.requestPermission(
                    'https://{{ app.request.host }}/safaripush',
                    'web.fi.stafettkarnevalen.stafapp',
                    {'userId' : '{{ app.user.id}}' },
                    callbackSafariPushRequest
                );
            }

            function callbackSafariPushRequest(permission) {
                console.log('callback');
                console.log(permission);
                if (permission.permission === 'denied') {
                    console.log('update db with denied');
                    let $url = Routing.generate('nav.authuser_merge_profile_data', {
                        '_locale': '{{ app.request.locale }}',
                        'path': 'ApplePushNotifications.Safari',
                        'value': 'denied'
                    });
                    $.ajax({
                        'url': $url,
                        'method': 'get',
                        'success': function (data) {
                            console.log(data);
                            document.location.reload();
                        },
                        'error': function (xhr) {
                            console.log(xhr);
                        }
                    });
                } else {
                    console.log('granted');
                    document.location.reload();
                }
            }

        </script>
    {% endif %}
    {% if browser().name == Browsers.CHROME %}
        <button class="js-push-button" disabled>
            Enable Push Messages
        </button>
        <script src="https://www.gstatic.com/firebasejs/5.1.0/firebase-app.js"></script>
        <script>
            var isPushEnabled = false;

            // Initialize Firebase
            var config = {
                apiKey: "AIzaSyCGGaMl6a5vHZLB_TpHFaXQkL8eIOQynF4",
                authDomain: "eternal-unity-183411.firebaseapp.com",
                databaseURL: "https://eternal-unity-183411.firebaseio.com",
                projectId: "eternal-unity-183411",
                storageBucket: "eternal-unity-183411.appspot.com",
                messagingSenderId: "81482094261"
            };
            firebase.initializeApp(config);

            window.addEventListener('load', function() {
                var pushButton = document.querySelector('.js-push-button');
                pushButton.addEventListener('click', function() {
                    if (isPushEnabled) {
                        unsubscribe();
                    } else {
                        subscribe();
                    }
                });

                // Check that service workers are supported, if so, progressively
                // enhance and add push messaging support, otherwise continue without it.
                console.log('register worker');

                if ('serviceWorker' in navigator) {
//                    navigator.serviceWorker.register('/bundles/fcm/fcm-service-worker.js')
                    navigator.serviceWorker.register('/fcm-service-worker.js')
                        .then(function(reg) { /*console.log(reg); */initializeState(); });
                } else {
                    console.warn('Service workers aren\'t supported in this browser.');
                }
            });

            // Once the service worker is registered set the initial state
            function initializeState() {
                console.log('initState');
                // Are Notifications supported in the service worker?
                if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
                    console.warn('Notifications aren\'t supported.');
                    return;
                }

                // Check the current Notification permission.
                // If its denied, it's a permanent block until the
                // user changes the permission
                if (Notification.permission === 'denied') {
                    console.warn('The user has blocked notifications.');
                    return;
                }

                // Check if push messaging is supported
                if (!('PushManager' in window)) {
                    console.warn('Push messaging isn\'t supported.');
                    return;
                }

                // We need the service worker registration to check for a subscription
                navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
                    console.log('foobar');
                    // Do we already have a push message subscription?
                    serviceWorkerRegistration.pushManager.getSubscription()
                        .then(function(subscription) {
                            // Enable any UI which subscribes / unsubscribes from
                            // push messages.
                            var pushButton = document.querySelector('.js-push-button');
                            pushButton.disabled = false;

                            if (!subscription) {
                                // We aren't subscribed to push, so set UI
                                // to allow the user to enable push
                                return;
                            }

                            // Keep your server in sync with the latest subscriptionId
                            sendSubscriptionToServer(subscription);

                            // Set your UI to show they have subscribed for
                            // push messages
                            pushButton.textContent = 'Disable Push Messages';
                            isPushEnabled = true;
                        })
                        .catch(function(err) {
                            console.warn('Error during getSubscription()', err);
                        });
                });
                console.log('done');
            }

            function subscribe() {
                // Disable the button so it can't be changed while
                // we process the permission request
                var pushButton = document.querySelector('.js-push-button');
                pushButton.disabled = true;

                navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
                    serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly: true})
                        .then(function(subscription) {
                            // The subscription was successful
                            isPushEnabled = true;
                            pushButton.textContent = 'Disable Push Messages';
                            pushButton.disabled = false;

                            // TODO: Send the subscription.endpoint to your server
                            // and save it to send a push message at a later date
                            return sendSubscriptionToServer(subscription);
                        })
                        .catch(function(e) {
                            if (Notification.permission === 'denied') {
                                // The user denied the notification permission which
                                // means we failed to subscribe and the user will need
                                // to manually change the notification permission to
                                // subscribe to push messages
                                console.warn('Permission for Notifications was denied');
                                pushButton.disabled = true;
                            } else {
                                // A problem occurred with the subscription; common reasons
                                // include network errors, and lacking gcm_sender_id and/or
                                // gcm_user_visible_only in the manifest.
                                console.error('Unable to subscribe to push.', e);
                                pushButton.disabled = false;
                                pushButton.textContent = 'Enable Push Messages';
                            }
                        });
                });
            }

            function sendSubscriptionToServer(subscription) {
                console.log(subscription);

            }

            function unsubscribe() {
                var pushButton = document.querySelector('.js-push-button');
                pushButton.disabled = true;

                navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
                    // To unsubscribe from push messaging, you need get the
                    // subscription object, which you can call unsubscribe() on.
                    serviceWorkerRegistration.pushManager.getSubscription().then(
                        function(pushSubscription) {
                            // Check we have a subscription to unsubscribe
                            if (!pushSubscription) {
                                // No subscription object, so set the state
                                // to allow the user to subscribe to push
                                isPushEnabled = false;
                                pushButton.disabled = false;
                                pushButton.textContent = 'Enable Push Messages';
                                return;
                            }

                            var subscriptionId = pushSubscription.subscriptionId;

                            // TODO: Make a request to your server to remove
                            // the subscriptionId from your data store so you
                            // don't attempt to send them push messages anymore

                            // We have a subscription, so call unsubscribe on it
                            pushSubscription.unsubscribe().then(function(successful) {
                                pushButton.disabled = false;
                                pushButton.textContent = 'Enable Push Messages';
                                isPushEnabled = false;
                            }).catch(function(e) {
                                // We failed to unsubscribe, this can lead to
                                // an unusual state, so may be best to remove
                                // the users data from your data store and
                                // inform the user that you have done so

                                console.log('Unsubscription error: ', e);
                                pushButton.disabled = false;
                                pushButton.textContent = 'Enable Push Messages';
                            });
                        }).catch(function(e) {
                        console.error('Error thrown while unsubscribing from push messaging.', e);
                    });
                });
            }

        </script>
    {% endif %}
</div>
