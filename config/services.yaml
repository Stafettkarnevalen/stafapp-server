# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Form\ButtonWithIconsExtension:
        class: App\Form\ButtonWithIconsExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\ButtonType }

    App\Form\SubmitWithIconsExtension:
        class: App\Form\SubmitWithIconsExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\SubmitType }

    App\EventListener\InteractiveLoginListener:
        class: App\EventListener\InteractiveLoginListener
        arguments: ['@security.authorization_checker', '@doctrine', '@session']
        tags:
            - { name: 'kernel.event_listener', event: 'security.interactive_login', method: onInteractiveLogin }

    App\EventListener\InteractiveLogoutListener:
        class: App\EventListener\InteractiveLogoutListener

    App\EventListener\UserTicketListener:
        class: App\EventListener\UserTicketListener
        arguments: [ '@service_container' ]
        tags:
            - { name: 'doctrine.event_listener', event: 'prePersist' }
            - { name: 'doctrine.event_listener', event: 'postUpdate' }

    App\EventListener\AnonymousAuthenticationListener:
        class: App\EventListener\AnonymousAuthenticationListener

    App\EventListener\CreatedByUserListener:
        class: App\EventListener\CreatedByUserListener
        #arguments: ['@security.token_storage', '@service_container']
        tags:
            - { name: 'doctrine.event_listener', event: 'prePersist' }
            - { name: 'doctrine.event_listener', event: 'preRemove' }
            - { name: 'doctrine.event_listener', event: 'postRemove' }

    App\EventListener\AccessControlledEntityListener:
        class: App\EventListener\AccessControlledEntityListener
        arguments: ['@kernel']
        tags:
            - { name: 'doctrine.event_listener', event: 'postLoad' }
            - { name: 'doctrine.event_listener', event: 'preRemove' }

    App\EventListener\OrderedEntityListener:
        class: App\EventListener\OrderedEntityListener
        tags:
            - { name: 'doctrine.event_listener', event: 'preRemove' }

    App\EventListener\LoggableEntityListener:
        class: App\EventListener\LoggableEntityListener
        arguments: ['@security.token_storage']
        tags:
            - { name: 'doctrine.event_subscriber', connection: 'default' }
            - { name: 'doctrine.event_listener', event: 'postLoad' }

    App\Entity\Security\OauthUserProvider:
        class: App\Entity\Security\OauthUserProvider
        arguments:
            ["@fos_user.user_manager", {facebook: facebookId, googleplus: googleplusId, instagram: instagramId, twitter: twitterId}, "@session", "@logger"]

    App\EventListener\ModalEventListener:
        class: App\EventListener\ModalEventListener
        arguments: [ '@security.token_storage', '@service_container' ]
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest' }
            - { name: 'kernel.event_listener', event: 'kernel.response', method: 'onKernelResponse' }
            - { name: 'kernel.event_listener', event: 'kernel.controller', method: 'onKernelController' }

    App\EventListener\InjectRoleHierarchyListener:
        class: App\EventListener\InjectRoleHierarchyListener
        arguments: [ '@service_container' ]
        tags:
            - { name: 'doctrine.event_listener', event: 'postLoad' }
            - { name: 'doctrine.event_listener', event: 'preLoad' }

    App\EventListener\RequiresGroupListener:
        class: App\EventListener\RequiresGroupListener
        arguments: [ '@logger' ]
        tags:
            - { name: 'doctrine.event_listener', event: 'postPersist' }
            - { name: 'doctrine.event_listener', event: 'postUpdate' }
