<?php
/**
 * Created by PhpStorm.
 * User: rjurgens
 * Date: 04/06/2017
 * Time: 17.06
 */

namespace App\Entity\Services;

use App\Entity\Interfaces\CreatedByUserInterface;
use App\Entity\Interfaces\LoggableEntity;
use App\Entity\Interfaces\Serializable;
use App\Entity\Traits\CloneableTrait;
use App\Entity\Traits\CreatedByUserTrait;
use App\Entity\Traits\LoggableTrait;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Gedmo\Mapping\Annotation as Gedmo;
use App\Entity\Traits\PersistencyDataTrait;
use App\Entity\Traits\VersionedTitleAndTextTrait;

/**
 * @ORM\Table(name="service_category_table", options={"collate"="utf8_swedish_ci"})
 * @ORM\Entity(repositoryClass="App\Repository\ServiceCategoryRepository")
 * @UniqueEntity(fields="title", message="category.exists")
 * @ORM\HasLifecycleCallbacks
 * @Gedmo\Loggable
 * @package App\Entity\Services
 * @author Robert JÃ¼rgens <robert@jurgens.fi>
 * @copyright Fma JÃ¼rgens 2017, All rights reserved.
 */
class ServiceCategory implements Serializable, CreatedByUserInterface, LoggableEntity
{
    /** use created by user trait */
    use CreatedByUserTrait;

    /** Use cloning functions */
    use CloneableTrait;

    /** Use loggable trait */
    use LoggableTrait;

    /** Use persistency data such as id and timestamps */
    use PersistencyDataTrait;

    /** Use title and text fields */
    use VersionedTitleAndTextTrait;

    /**
     * @ORM\OneToMany(targetEntity="Service", mappedBy="serviceCategory", cascade={"persist", "merge", "remove"})
     * @var ArrayCollection $services The services provided
     */
    protected $services;

    /**
     * @ORM\OneToMany(targetEntity="ServiceCategory", mappedBy="parent")
     * @var ArrayCollection $children Children of this service category
     */
    protected $children;

    /**
     * @ORM\ManyToOne(targetEntity="ServiceCategory", inversedBy="children")
     * @ORM\JoinColumn(name="parent_fld", referencedColumnName="id_fld", nullable=true)
     * @var Service $parent The parent of this service category
     */
    protected $parent;

    /**
     * ServiceType constructor.
     */
    public function __construct()
    {
        $this->services = new ArrayCollection();
     }

    /**
     * Gets the services.
     *
     * @return ArrayCollection
     */
    public function getServices()
    {
        return $this->services;
    }

    /**
     * Sets the services.
     *
     * @param ArrayCollection $services
     * @return $this
     */
    public function setServices($services)
    {
        $this->services = $services;

        return $this;
    }

    /**
     * Gets the children.
     *
     * @return ArrayCollection
     */
    public function getChildren()
    {
        return $this->children;
    }

    /**
     * Sets the children.
     *
     * @param ArrayCollection $children
     * @return $this
     */
    public function setChildren($children)
    {
        $this->children = $children;

        return $this;
    }

    /**
     * Gets the parent.
     *
     * @return Service
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Sets the parent.
     *
     * @param Service $parent
     * @return $this
     */
    public function setParent($parent)
    {
        $this->parent = $parent;

        return $this;
    }

}
