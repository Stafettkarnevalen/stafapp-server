<?php
/**
 * Created by PhpStorm.
 * User: rjurgens
 * Date: 14/12/2016
 * Time: 21.34
 */

namespace App\Repository;


use App\Entity\Schools\SchoolUnit;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;

class UserRepository extends EntityRepository
{
    public function findOneBy(array $criteria, array $orderBy = null)
    {
       // print_r($this->);
       // print_r($criteria);
       // die();

        if (array_key_exists('usernameCanonical', $criteria)) {
            $uname = $criteria['usernameCanonical'];
            unset($criteria['usernameCanonical']);
            $criteria['username'] = $uname;
        }
        $user = parent::findOneBy($criteria, $orderBy);

        if ($user === null)
            return null;

        /*$em = $this->getEntityManager();

        if ($user->hasRole('ROLE_ADMIN')){
            $schoolUnits = $em->getRepository(SchoolUnit::class)->findAll();
            usort($schoolUnits, function (SchoolUnit $a, SchoolUnit $b) { return strcmp($a->getName(), $b->getName()); });
            $user->setSchoolUnits(new ArrayCollection($schoolUnits));
        }*/

        return $user;
    }

    public function find($id, $lockMode = null, $lockVersion = null)
    {
        $user = parent::find($id, $lockMode, $lockVersion);
        if ($user === null)
            return null;

        $em = $this->getEntityManager();

        /** Attach all schools to an admin user */
        /*if ($user->hasRole('ROLE_ADMIN')){
            $schoolUnits = $em->getRepository(SchoolUnit::class)->findAll();
            usort($schoolUnits, function (SchoolUnit $a, SchoolUnit $b) { return strcmp($a->getName(), $b->getName()); });
            $user->setSchoolUnits(new ArrayCollection($schoolUnits));
        }*/
        return $user;
    }

    public function findAll()
    {
        return parent::findAll(); // TODO: Change the autogenerated stub
    }


    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        return parent::findBy($criteria, $orderBy, $limit, $offset); // TODO: Change the autogenerated stub
    }

    public function findLike($pattern)
    {
        $q = $this->createQueryBuilder('u')
            ->where('u.username LIKE :pattern OR u.firstname LIKE :pattern OR u.lastname LIKE :pattern')
            ->setParameter('pattern', '%' . $pattern . '%')
            ->getQuery();
        return $q->getResult();
    }
}
