<?php
/**
 * Created by PhpStorm.
 * User: rjurgens
 * Date: 22/11/2016
 * Time: 21.45
 */
namespace App\Form\SchoolUnit;

use App\Entity\Schools\SchoolType;
use App\Entity\Schools\SchoolUnit;
use App\Entity\Schools\SchoolUnitName;
use App\Form\Message\MessageType;
use App\Form\PhoneNumber\PhoneNumberType;
use App\Repository\SchoolTypeRepository;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ButtonType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\FormType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class EditType extends AbstractType
{
    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $sid = $builder->getData()->getId();

        $builder
            ->add('password', TextType::class, [
                'label' => 'field.password'
            ])
            ->add(
                $builder->create('name', FormType::class, [
                    'label' => false,
                    'by_reference' => true,
                    'data_class' => SchoolUnitName::class])
                    ->add('name', TextType::class, [
                        'label' => 'field.name'
                    ])
                    ->add('abbreviation', TextType::class, [
                        'label' => 'field.abbreviation',
                        'required' => false,
                        'attr' => ['maxlength' => '12']
                    ])
                    ->add('streetAddress', TextType::class, [
                        'label' => 'field.address'
                    ])
                    ->add('zipcode', TextType::class, [
                        'label' => 'field.zipcode',
                        'attr' => ['pattern' => '\\d{5}']
                    ])
                    ->add('city', TextType::class, [
                        'label' => 'field.city'
                    ])
                    ->add('pobox', TextType::class, [
                        'label' => 'field.pobox',
                        'required' => false
                    ])
                    ->add('country', TextType::class, [
                        'label' => 'field.country'
                    ])
                    ->add('phone', PhoneNumberType::class, [
                        'label' => 'field.phone',
                        'defaultArea' => '+358'
                    ])
                    ->add('email', EmailType::class, [
                        'label' => 'field.email'
                    ])
            )
            ->add('schoolType', EntityType::class, [
                'expanded' => false,
                'multiple' => false,
                'class' => SchoolType::class,
                'choice_label' => function(SchoolType $type) { return $type->getName(); },
                'choice_attr' => function () { return ['class' => 'inline']; },
                'label_attr' => ['class' => 'checkbox-inline'],
                'label' => 'field.school_type',
                'choice_translation_domain' => false,
                'query_builder' => function(SchoolTypeRepository $str) {
                    return $str
                        ->createQueryBuilder('st')
                        ->where('st.group IS NOT NULL')
                        ->orderBy('st.name', 'ASC')
                    ;
                }
            ])
            ->add('isActive', ChoiceType::class, [
                'label' => 'field.status',
                'expanded' => true,
                'choice_attr' => function () { return ['class' => 'inline']; },
                'label_attr' => ['class' => 'radio-inline'],
                'choice_translation_domain' => 'messages',
                'choices' => ['label.inactive' => 0, 'label.active' => 1],
            ])
            ->add('message', MessageType::class, [
                'independent' => false,
                'label' => 'field.message',
                'translation_domain' => 'school',
                'required' => false,
            ])
            ->add('submit', SubmitType::class, [
                'translation_domain' => 'messages',
                'left_icon' => 'fa-save',
                'right_icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn-success form-submit',
                    'data-helpmode' => null,
                    'data-placement' => 'top',
                    'title' => 'action.save',
                    'data-content' => 'help.action.save',
                ],
                'label' => 'action.save',
            ])
            ->add('close', ButtonType::class, [
                'translation_domain' => 'messages',
                'left_icon' => 'fa-chevron-left',
                'right_icon' => 'fa-close',
                'attr' => [
                    'class' => 'btn-default',
                    'data-dismiss' => 'modal',
                    'data-helpmode' => null,
                    'data-placement' => 'top',
                    'title' => 'action.close',
                    'data-content' => 'help.action.close.window',
                ],
                'label' => 'action.close',
            ])
        ;

        if ($sid) $builder->add('delete', ButtonType::class, [
            'translation_domain' => 'messages',
            'left_icon' => 'fa-trash',
            'right_icon' => 'fa-minus',
            'attr' => [
                'class' => 'btn-danger',
                'data-toggle' => 'confirm',
                'data-reload' => 'true',
                'data-title' => $options['delete_title'],
                'value' => $options['delete_path'],
                'data-helpmode' => null,
                'data-placement' => 'top',
                'title' => 'action.delete',
                'data-content' => 'help.action.delete',
            ],
            'label' => 'action.delete',
        ]);

    }

    /**
     * {@inheritdoc}
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'data_class' => SchoolUnit::class,
            'translation_domain' => 'school',
            'delete_title' => '',
            'delete_path' => '',
        ]);
    }
}
